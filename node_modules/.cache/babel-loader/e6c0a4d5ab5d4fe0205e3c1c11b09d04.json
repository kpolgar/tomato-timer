{"ast":null,"code":"var _jsxFileName = \"/Users/makosguba/Desktop/tomato_timer/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Setter from './components/Setter/Setter';\nimport Timer from './components/Timer/Timer';\nimport Controls from './components/Controls/Controls';\nimport Sound from './components/Sound/Sound';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startTimer = () => {\n      if (!this.state.running) {\n        //if the stopwatch is not already running\n        this.setState({\n          startTime: new Date().getTime()\n        }); //this.startTime = new Date().getTime(); //getting time when stopwatch is started\n        //We are going to check the time every second\n\n        console.log('startTime: ', this.startTime);\n        this.tInterval = setInterval(this.getShowTime, 1000); //setting interval\n\n        this.setState({\n          running: true,\n          paused: false\n        });\n      }\n    };\n\n    this.getShowTime = () => {\n      this.setState({\n        updatedTime: new Date().getTime()\n      }); //this.updatedTime = new Date().getTime() - 1000;\n\n      console.log('updatedTime: ', this.updatedTime); //if we hit the pause button, the elapsed time needs to be corrected and we must add the time spent waiting\n\n      if (this.savedTime) {\n        console.log('hitting saved time in pause');\n\n        if (this.state.cycle === 'Session') {\n          //checking for if we are in break or session\n          this.difference = this.savedTime - (this.state.updatedTime - this.state.startTime);\n        }\n\n        if (this.state.cycle === 'Break') {\n          //check for if we are in break or session\n          this.difference = this.savedTime - (this.state.updatedTime - this.state.startTime);\n        }\n      } else {\n        //if pause button was not used\n        if (this.state.cycle === 'Session') {\n          //checking for if we are in break or session\n          this.difference = this.state.sessionCount * 60000 - (this.state.updatedTime - this.state.startTime);\n          console.log('difference before save', this.difference); //console.log(this.difference)\n        }\n\n        if (this.state.cycle === 'Break') {\n          //check for if we are in break or session\n          this.difference = this.state.breakCount * 60000 - (this.state.updatedTime - this.state.startTime); //console.log(this.difference)\n        }\n      }\n\n      var minutes = Math.floor(this.difference % (1000 * 60 * 60) / (1000 * 60));\n      var seconds = Math.floor(this.difference % (1000 * 60) / 1000);\n      this.minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      this.seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n      if (this.seconds >= 0) {\n        this.setState({\n          currentTime: `${this.minutes} : ${this.seconds}`\n        });\n        console.log('currentTime: ', this.state.currentTime);\n      } else {\n        clearInterval(this.tInterval); //we clear the interval when the timer reaches 0\n\n        this.savedTime = 0;\n\n        if (this.state.cycle === 'Session') {\n          //we toggle the session to break\n          if (this.state.breakCount < 10) {\n            //adding some formatting for single digits\n            this.setState({\n              cycle: 'Break',\n              currentTime: `0${this.state.breakCount} : 00`\n            });\n          } else {\n            this.setState({\n              cycle: 'Break',\n              currentTime: `${this.state.breakCount} : 00`\n            });\n          }\n        } else {\n          //if we are in a break, we toggle to a session\n          if (this.state.sessionCount < 10) {\n            //adding some formatting for single digits\n            this.setState({\n              cycle: 'Session',\n              currentTime: `0${this.state.sessionCount} : 00`\n            });\n          } else {\n            this.setState({\n              cycle: 'Session',\n              currentTime: `${this.state.sessionCount} : 00`\n            });\n          }\n        }\n\n        this.startTime = new Date().getTime(); //getting new start time\n\n        this.tInterval = setInterval(this.getShowTime, 1000); //starting the timer for the next session\n      }\n    };\n\n    this.resetTimer = () => {\n      if (this.state.running) {\n        //if the stopwatch is not already running\n        clearInterval(this.tInterval);\n        this.setState({\n          breakCount: 5,\n          sessionCount: 25,\n          sound: true,\n          //sound is turned on or off\n          cycle: 'Session',\n          //are we in a break or session\n          running: false,\n          //if timer is running\n          paused: false,\n          //if paused is clicked\n          currentTime: '25 : 00'\n        });\n      }\n    };\n\n    this.pauseTimer = () => {\n      console.log(this.state.paused);\n\n      if (!this.difference) {//if the timer is never started we do nothing\n      } else if (!this.state.paused) {\n        //if the stopwatch is not already running\n        clearInterval(this.tInterval);\n        console.log(this.state.paused, 'second pause');\n\n        if (this.state.cycle === \"Session\") {\n          this.savedTime = this.difference;\n        }\n\n        if (this.state.cycle === \"Break\") {\n          this.savedTime = this.difference;\n        }\n\n        this.setState({\n          running: false,\n          paused: true //if paused is clicked\n\n        });\n      } else {\n        this.startTimer();\n      }\n    };\n\n    this.toggleSound = () => {\n      this.setState({\n        sound: !this.state.sound\n      });\n    };\n\n    this.bIncrement = () => {\n      if (this.state.breakCount < 60 && !this.state.running) {\n        this.setState({\n          breakCount: this.state.breakCount + 1\n        });\n      }\n    };\n\n    this.bDecrement = () => {\n      if (this.state.breakCount > 1 && !this.state.running) {\n        this.setState({\n          breakCount: this.state.breakCount - 1\n        });\n      }\n    };\n\n    this.sIncrement = () => {\n      if (this.state.sessionCount < 60 && !this.state.running) {\n        if (this.state.sessionCount < 10) {\n          //adding some formatting for single digits\n          this.setState({\n            sessionCount: this.state.sessionCount + 1,\n            currentTime: `0${this.state.sessionCount + 1} : 00`\n          });\n        } else {\n          this.setState({\n            sessionCount: this.state.sessionCount + 1,\n            currentTime: `${this.state.sessionCount + 1} : 00`\n          });\n        }\n      }\n    };\n\n    this.sDecrement = () => {\n      if (this.state.sessionCount > 1 && !this.state.running) {\n        if (this.state.sessionCount < 10) {\n          //adding some formatting for single digits\n          this.setState({\n            sessionCount: this.state.sessionCount - 1,\n            currentTime: `0${this.state.sessionCount - 1} : 00`\n          });\n        } else {\n          this.setState({\n            sessionCount: this.state.sessionCount - 1,\n            currentTime: `${this.state.sessionCount - 1} : 00`\n          });\n        }\n      }\n    };\n\n    this.state = {\n      breakCount: 5,\n      sessionCount: 25,\n      sound: true,\n      //sound is turned on or off\n      cycle: 'Session',\n      //are we in a break or session\n      running: false,\n      //if timer is running\n      paused: false,\n      //if paused is clicked\n      currentTime: '25 : 00',\n      startTime: null,\n      updatedTime: null\n    }; //this.startTime = null; //what time was stopwatch started\n    //this.updatedTime= null; //time right now\n\n    this.tInterval = 0; //How often we will check the difference between now and our start time\n\n    this.savedTime = 0; //if user presses pause keep track of how long\n\n    this.difference = 0; //the difference in current time and start time + saved time;\n  } //Start the stopwatch\n\n\n  // countDown = () => {\n  //   // if (this.state.sessionCount !== 0) {\n  //   //   startTime = new Date().getTime();\n  //   //   tInterval = setInterval(getShowTime, 1);\n  //   // }\n  // }\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container_div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Pomodoro Clock\"), React.createElement(Setter, {\n      breakCount: this.state.breakCount,\n      sessionCount: this.state.sessionCount,\n      bIncrement: this.bIncrement,\n      bDecrement: this.bDecrement,\n      sIncrement: this.sIncrement,\n      sDecrement: this.sDecrement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(Timer, {\n      breakCount: this.state.breakCount,\n      sessionCount: this.state.sessionCount,\n      currentTime: this.state.currentTime,\n      cycle: this.state.cycle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(Controls, {\n      startTimer: this.startTimer,\n      resetTimer: this.resetTimer,\n      pauseTimer: this.pauseTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(Sound, {\n      sound: this.state.sound,\n      toggleSound: this.toggleSound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/makosguba/Desktop/tomato_timer/src/App.js"],"names":["React","Component","Setter","Timer","Controls","Sound","App","constructor","props","startTimer","state","running","setState","startTime","Date","getTime","console","log","tInterval","setInterval","getShowTime","paused","updatedTime","savedTime","cycle","difference","sessionCount","breakCount","minutes","Math","floor","seconds","currentTime","clearInterval","resetTimer","sound","pauseTimer","toggleSound","bIncrement","bDecrement","sIncrement","sDecrement","render"],"mappings":"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","sourcesContent":["import React, {Component } from 'react';\nimport './App.css';\nimport Setter from './components/Setter/Setter';\nimport Timer from './components/Timer/Timer';\nimport Controls from './components/Controls/Controls';\nimport Sound from './components/Sound/Sound';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        breakCount: 5,\n        sessionCount: 25,\n        sound: true, //sound is turned on or off\n        cycle: 'Session',//are we in a break or session\n        running: false, //if timer is running\n        paused: false,//if paused is clicked\n        currentTime: '25 : 00',\n        startTime: null,\n        updatedTime: null, \n    }\n\n    //this.startTime = null; //what time was stopwatch started\n    //this.updatedTime= null; //time right now\n    this.tInterval = 0; //How often we will check the difference between now and our start time\n    this.savedTime = 0; //if user presses pause keep track of how long\n    this.difference = 0; //the difference in current time and start time + saved time;\n}\n    \n    //Start the stopwatch\n    startTimer = () => {\n      if (!this.state.running) { //if the stopwatch is not already running\n        this.setState({\n          startTime: new Date().getTime()\n        });\n        //this.startTime = new Date().getTime(); //getting time when stopwatch is started\n        //We are going to check the time every second\n        console.log('startTime: ', this.startTime);\n        this.tInterval = setInterval(this.getShowTime, 1000); //setting interval\n        this.setState({\n          running: true,\n          paused: false\n        });\n      }\n    }\n    //This is the timer function\n    getShowTime = () => {\n      this.setState({\n        updatedTime: new Date().getTime()\n      });\n      //this.updatedTime = new Date().getTime() - 1000;\n      console.log('updatedTime: ', this.updatedTime);\n      //if we hit the pause button, the elapsed time needs to be corrected and we must add the time spent waiting\n      if (this.savedTime) {\n        console.log('hitting saved time in pause')\n        if (this.state.cycle === 'Session') { //checking for if we are in break or session\n          this.difference = this.savedTime - (this.state.updatedTime - this.state.startTime);\n        }\n        if (this.state.cycle === 'Break') { //check for if we are in break or session\n          this.difference = this.savedTime - (this.state.updatedTime - this.state.startTime);\n        }\n      } else { //if pause button was not used\n        if (this.state.cycle === 'Session') { //checking for if we are in break or session\n          this.difference = (this.state.sessionCount * 60000) - (this.state.updatedTime - this.state.startTime);\n          console.log('difference before save', this.difference)\n          //console.log(this.difference)\n        }\n        if (this.state.cycle === 'Break') { //check for if we are in break or session\n          this.difference = (this.state.breakCount * 60000) - (this.state.updatedTime - this.state.startTime);\n          //console.log(this.difference)\n        }\n      }\n\n      var minutes = Math.floor((this.difference % (1000 * 60 * 60)) / (1000 * 60));\n      var seconds = Math.floor((this.difference % (1000 * 60)) / 1000);\n      this.minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n      this.seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n      if (this.seconds >= 0) {\n        this.setState({\n          currentTime: `${this.minutes} : ${this.seconds}`\n        });\n        console.log('currentTime: ', this.state.currentTime);\n      } else {\n        clearInterval(this.tInterval); //we clear the interval when the timer reaches 0\n        this.savedTime = 0;\n        if (this.state.cycle === 'Session') { //we toggle the session to break\n          if (this.state.breakCount < 10) { //adding some formatting for single digits\n            this.setState({\n              cycle: 'Break',\n              currentTime: `0${this.state.breakCount} : 00`\n            })\n          } else { \n            this.setState({ \n              cycle: 'Break',\n              currentTime: `${this.state.breakCount} : 00`\n            })\n          }\n        }\n        else { //if we are in a break, we toggle to a session\n          if (this.state.sessionCount < 10) { //adding some formatting for single digits\n            this.setState({\n              cycle: 'Session',\n              currentTime: `0${this.state.sessionCount} : 00`\n            })\n          } else { \n            this.setState({ \n              cycle: 'Session',\n              currentTime: `${this.state.sessionCount} : 00`\n            })\n          }\n        }\n        this.startTime = new Date().getTime(); //getting new start time\n        this.tInterval = setInterval(this.getShowTime, 1000); //starting the timer for the next session\n        \n      }\n    }\n\n    //reset function\n    resetTimer = () => {\n      if (this.state.running) { //if the stopwatch is not already running\n        clearInterval(this.tInterval);\n        this.setState({\n          breakCount: 5,\n          sessionCount: 25,\n          sound: true, //sound is turned on or off\n          cycle: 'Session',//are we in a break or session\n          running: false, //if timer is running\n          paused: false,//if paused is clicked\n          currentTime: '25 : 00'\n        });\n      }\n    }\n\n    pauseTimer = () => {\n      console.log(this.state.paused)\n      \n      if (!this.difference){\n        //if the timer is never started we do nothing\n      }\n      else if (!this.state.paused) { //if the stopwatch is not already running\n        clearInterval(this.tInterval);\n        console.log(this.state.paused, 'second pause')\n        if (this.state.cycle === \"Session\") {\n          this.savedTime = this.difference;\n        }\n        if (this.state.cycle === \"Break\") {\n          this.savedTime = this.difference;\n        }\n        this.setState({\n          running: false,\n          paused: true,//if paused is clicked\n        });\n      }\n      else {\n        this.startTimer();\n      }\n    }\n\n    //allows user to turn sound on or off\n    toggleSound = () => {\n      this.setState({\n        sound: !this.state.sound\n      })\n    }\n\n    //I think this will play the sound\n    // setSound = (sound) => {\n    //   this.setState({\n    //     sound: sound\n    //   })\n    // };\n\n    bIncrement = ()  => {\n        if (this.state.breakCount < 60 && !this.state.running) {\n          this.setState({\n                breakCount: this.state.breakCount + 1,\n              });\n        }\n        \n      };\n      \n    bDecrement = () => {\n        if (this.state.breakCount > 1 && !this.state.running) {\n            this.setState({\n                breakCount: this.state.breakCount - 1,\n            });\n        }\n      };\n    \n    //allows user to increment the session length\n    sIncrement = () => {\n        if (this.state.sessionCount < 60 && !this.state.running) {\n          if (this.state.sessionCount < 10) { //adding some formatting for single digits\n            this.setState({\n              sessionCount: this.state.sessionCount + 1,\n              currentTime: `0${this.state.sessionCount+1} : 00`\n            })\n          } else { \n            this.setState({ \n              sessionCount: this.state.sessionCount + 1,\n              currentTime: `${this.state.sessionCount+1} : 00`\n            })\n          }\n        }  \n    };\n    \n    //allows user to decrement the session length\n    sDecrement = () => {\n        if (this.state.sessionCount > 1 && !this.state.running) {\n          if (this.state.sessionCount < 10) { //adding some formatting for single digits\n            this.setState({\n              sessionCount: this.state.sessionCount - 1,\n              currentTime: `0${this.state.sessionCount-1} : 00`\n            })\n          } else { \n            this.setState({ \n              sessionCount: this.state.sessionCount - 1,\n              currentTime: `${this.state.sessionCount-1} : 00`\n            })\n          }\n        }   \n        \n    };\n\n    // countDown = () => {\n    //   // if (this.state.sessionCount !== 0) {\n    //   //   startTime = new Date().getTime();\n    //   //   tInterval = setInterval(getShowTime, 1);\n    //   // }\n    // }\n  render() {\n    return (\n      <div className=\"container_div\">\n        <h1>Pomodoro Clock</h1>\n        <Setter \n          breakCount={this.state.breakCount}\n          sessionCount={this.state.sessionCount}\n          bIncrement={this.bIncrement}\n          bDecrement={this.bDecrement}\n          sIncrement={this.sIncrement}\n          sDecrement={this.sDecrement}\n        />\n        <Timer \n          breakCount={this.state.breakCount}\n          sessionCount={this.state.sessionCount}\n          currentTime={this.state.currentTime}\n          cycle={this.state.cycle}\n        />\n        <Controls \n          startTimer={this.startTimer}\n          resetTimer={this.resetTimer}\n          pauseTimer={this.pauseTimer}\n        />\n        <Sound \n          sound={this.state.sound}\n          toggleSound={this.toggleSound}\n        />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}