{"ast":null,"code":"var _jsxFileName = \"/Users/makosguba/Desktop/tomato_timer/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Setter from './components/Setter/Setter';\nimport Timer from './components/Timer/Timer';\nimport Controls from './components/Controls/Controls';\nimport Sound from './components/Sound/Sound';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startTimer = () => {\n      if (!this.state.running) {\n        let newTime = new Date().getTime(); //We are going to check the time every second\n\n        let interval = setInterval(this.getShowTime, 1000);\n        this.setState({\n          startTime: newTime,\n          running: true,\n          tInterval: interval\n        });\n      }\n    };\n\n    this.getShowTime = () => {\n      let update = new Date().getTime(); //if we hit the pause button, the elapsed time needs to be corrected and we must add the time spent waiting\n\n      if (this.state.savedTime) {\n        var diff = this.state.updatedTime - this.state.startTime + this.state.savedTime;\n        this.setState({\n          updatedTime: update,\n          difference: diff\n        });\n      } else {\n        var diff2 = this.state.updatedTime - this.state.startTime;\n        this.setState({\n          updatedTime: update,\n          difference: diff2\n        });\n      }\n\n      var minutes = Math.floor(this.state.difference % (1000 * 60 * 60) / (1000 * 60));\n      var seconds = Math.floor(this.state.difference % (1000 * 60) / 1000);\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    };\n\n    this.switchMode = () => {\n      if (this.state.cycle === 'Session') {\n        this.setState({\n          cycle: 'Break'\n        });\n      } else {\n        this.setState({\n          cycle: 'Session'\n        });\n      }\n    };\n\n    this.toggleSound = () => {\n      this.setState({\n        sound: !this.state.sound\n      });\n    };\n\n    this.bIncrement = () => {\n      if (this.state.breakCount < 60) {\n        this.setState({\n          breakCount: this.state.breakCount + 1,\n          currentTime: `${this.state.breakCount + 1} : 00`\n        });\n      }\n    };\n\n    this.bDecrement = () => {\n      if (this.state.breakCount > 0) {\n        this.setState({\n          breakCount: this.state.breakCount - 1\n        });\n      }\n    };\n\n    this.sIncrement = () => {\n      if (this.state.sessionCount < 60) {\n        this.setState({\n          sessionCount: this.state.sessionCount + 1\n        });\n      }\n    };\n\n    this.sDecrement = () => {\n      if (this.state.sessionCount > 0) {\n        this.setState({\n          sessionCount: this.state.sessionCount - 1\n        });\n      }\n    };\n\n    this.state = {\n      breakCount: 5,\n      sessionCount: 25,\n      sound: true,\n      //sound is turned on or off\n      cycle: 'Session',\n      //are we in a break or session\n      running: false,\n      //if timer is running\n      paused: true,\n      //if paused is clicked\n      currentTime: '25:00'\n    };\n    this.startTime = null; //what time was stopwatch started\n\n    this.updatedTime = null; //time right now\n\n    this.tInterval = 0; //How often we will check the difference between now and our start time\n\n    this.savedTime = 0; //if user presses pause keep track of how long\n\n    this.difference = 0; //the difference in current time and start time + saved time\n  } //Start the stopwatch\n\n\n  // countDown = () => {\n  //   // if (this.state.sessionCount !== 0) {\n  //   //   startTime = new Date().getTime();\n  //   //   tInterval = setInterval(getShowTime, 1);\n  //   // }\n  // }\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container_div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Pomodoro Clock\"), React.createElement(Setter, {\n      breakCount: this.state.breakCount,\n      sessionCount: this.state.sessionCount,\n      bIncrement: this.bIncrement,\n      bDecrement: this.bDecrement,\n      sIncrement: this.sIncrement,\n      sDecrement: this.sDecrement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(Timer, {\n      breakCount: this.state.breakCount,\n      sessionCount: this.state.sessionCount,\n      currentTime: this.state.currentTime,\n      cycle: this.state.cycle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(Controls, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(Sound, {\n      sound: this.state.sound,\n      toggleSound: this.toggleSound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/makosguba/Desktop/tomato_timer/src/App.js"],"names":["React","Component","Setter","Timer","Controls","Sound","App","constructor","props","startTimer","state","running","newTime","Date","getTime","interval","setInterval","getShowTime","setState","startTime","tInterval","update","savedTime","diff","updatedTime","difference","diff2","minutes","Math","floor","seconds","switchMode","cycle","toggleSound","sound","bIncrement","breakCount","currentTime","bDecrement","sIncrement","sessionCount","sDecrement","paused","render"],"mappings":"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","sourcesContent":["import React, {Component } from 'react';\nimport './App.css';\nimport Setter from './components/Setter/Setter';\nimport Timer from './components/Timer/Timer';\nimport Controls from './components/Controls/Controls';\nimport Sound from './components/Sound/Sound';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        breakCount: 5,\n        sessionCount: 25,\n        sound: true, //sound is turned on or off\n        cycle: 'Session',//are we in a break or session\n        running: false, //if timer is running\n        paused: true,//if paused is clicked\n        currentTime: '25:00'\n    }\n\n    this.startTime = null; //what time was stopwatch started\n    this.updatedTime= null; //time right now\n    this.tInterval = 0; //How often we will check the difference between now and our start time\n    this.savedTime = 0; //if user presses pause keep track of how long\n    this.difference = 0; //the difference in current time and start time + saved time\n}\n    \n    //Start the stopwatch\n    startTimer = () => {\n      if (!this.state.running) {\n        let newTime = new Date().getTime();\n        //We are going to check the time every second\n        let interval = setInterval(this.getShowTime, 1000);\n        this.setState({\n          startTime: newTime,\n          running: true,\n          tInterval: interval\n        })\n      }\n    }\n    //This is the timer function\n    getShowTime = () => {\n      let update = new Date().getTime();\n      //if we hit the pause button, the elapsed time needs to be corrected and we must add the time spent waiting\n      if (this.state.savedTime) {\n        var diff = (this.state.updatedTime - this.state.startTime) + this.state.savedTime;\n        this.setState({\n          updatedTime: update,\n          difference: diff\n        })\n      } else {\n        var diff2 = this.state.updatedTime - this.state.startTime;\n        this.setState({\n          updatedTime: update,\n          difference: diff2\n        })\n      }\n\n      var minutes = Math.floor((this.state.difference % (1000 * 60 * 60)) / (1000 * 60));\n      var seconds = Math.floor((this.state.difference % (1000 * 60)) / 1000);\n      minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n      seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n    }\n    //switch mode between session and break\n    switchMode = () => {\n      if (this.state.cycle === 'Session') {\n        this.setState({\n          cycle: 'Break'\n        })\n      }\n      else {\n        this.setState({\n          cycle: 'Session'\n        })\n      }\n    }\n\n    //allows user to turn sound on or off\n    toggleSound = () => {\n      this.setState({\n        sound: !this.state.sound\n      })\n    }\n\n    //I think this will play the sound\n    // setSound = (sound) => {\n    //   this.setState({\n    //     sound: sound\n    //   })\n    // };\n\n    bIncrement = ()  => {\n        if (this.state.breakCount < 60) {\n            this.setState({\n                breakCount: this.state.breakCount + 1,\n                currentTime: `${this.state.breakCount+1} : 00`\n              });\n        }\n        \n      };\n      \n    bDecrement = () => {\n        if (this.state.breakCount > 0) {\n            this.setState({\n                breakCount: this.state.breakCount - 1\n            });\n        }\n      };\n    \n    \n    sIncrement = () => {\n        if (this.state.sessionCount < 60) {\n            this.setState({\n                sessionCount: this.state.sessionCount + 1\n            });\n        } \n    };\n          \n    sDecrement = () => {\n        if (this.state.sessionCount > 0) {\n            this.setState({\n                sessionCount: this.state.sessionCount - 1\n            });\n        }\n    };\n\n    // countDown = () => {\n    //   // if (this.state.sessionCount !== 0) {\n    //   //   startTime = new Date().getTime();\n    //   //   tInterval = setInterval(getShowTime, 1);\n    //   // }\n    // }\n  render() {\n    return (\n      <div className=\"container_div\">\n        <h1>Pomodoro Clock</h1>\n        <Setter \n          breakCount={this.state.breakCount}\n          sessionCount={this.state.sessionCount}\n          bIncrement={this.bIncrement}\n          bDecrement={this.bDecrement}\n          sIncrement={this.sIncrement}\n          sDecrement={this.sDecrement}\n        />\n        <Timer \n          breakCount={this.state.breakCount}\n          sessionCount={this.state.sessionCount}\n          currentTime={this.state.currentTime}\n          cycle={this.state.cycle}\n        />\n        <Controls />\n        <Sound \n          sound={this.state.sound}\n          toggleSound={this.toggleSound}\n        />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}