{"ast":null,"code":"var _jsxFileName = \"/Users/makosguba/Desktop/tomato_timer/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Setter from './components/Setter/Setter';\nimport Timer from './components/Timer/Timer';\nimport Controls from './components/Controls/Controls';\nimport Sound from './components/Sound/Sound';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startTimer = () => {\n      if (!this.state.running) {\n        //if the stopwatch is not already \n        this.startTime = new Date().getTime(); //getting time when stopwatch is started\n        //We are going to check the time every second\n\n        this.tInterval = setInterval(this.getShowTime, 1000); //setting interval\n\n        this.setState({\n          running: true\n        });\n      }\n    };\n\n    this.getShowTime = () => {\n      this.updatedTime = new Date().getTime(); //if we hit the pause button, the elapsed time needs to be corrected and we must add the time spent waiting\n\n      if (this.state.savedTime) {\n        this.difference = this.updatedTime - this.startTime + this.savedTime;\n      } else {\n        //if pause button was not used\n        if (this.state.cycle === 'Session') {\n          //checking for if we are in break or session\n          this.difference = this.state.sessionCount * 60000 - (this.updatedTime - this.startTime);\n          console.log('difference', this.difference);\n        }\n\n        if (this.state.cycle === 'Break') {\n          //check for if we are in break or session\n          this.difference = this.state.breakCount * 60000 - (this.updatedTime - this.startTime);\n          console.log('difference', this.difference);\n        }\n      }\n\n      var minutes = Math.floor(this.difference % (1000 * 60 * 60) / (1000 * 60));\n      var seconds = Math.floor(this.difference % (1000 * 60) / 1000);\n      this.minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      this.seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n      if (this.seconds >= 0) {\n        this.setState({\n          currentTime: `${this.minutes} : ${this.seconds}`\n        });\n      } else {\n        clearInterval(this.tInterval);\n\n        if (this.state.cycle === 'Session') {\n          if (this.state.breakCount < 10) {\n            this.setState({\n              cycle: 'Break',\n              currentTime: `0${this.state.breakCount} : 00`\n            });\n          } else {\n            this.setState({\n              cycle: 'Break',\n              currentTime: `${this.state.breakCount} : 00`\n            });\n          }\n        } else {\n          this.setState({\n            cycle: 'Session',\n            currentTime: `${this.state.sessionCount} : 00`\n          });\n        }\n\n        this.startTime = new Date().getTime();\n        this.tInterval = setInterval(this.getShowTime, 1000);\n      }\n    };\n\n    this.switchMode = () => {\n      if (this.state.cycle === 'Session') {\n        this.setState({\n          cycle: 'Break'\n        });\n      } else {\n        this.setState({\n          cycle: 'Session'\n        });\n      }\n    };\n\n    this.toggleSound = () => {\n      this.setState({\n        sound: !this.state.sound\n      });\n    };\n\n    this.bIncrement = () => {\n      if (this.state.breakCount < 60 && !this.state.running) {\n        this.setState({\n          breakCount: this.state.breakCount + 1,\n          currentTime: `${this.state.breakCount + 1} : 00`\n        });\n      }\n    };\n\n    this.bDecrement = () => {\n      if (this.state.breakCount > 1 && !this.state.running) {\n        this.setState({\n          breakCount: this.state.breakCount - 1,\n          currentTime: `${this.state.breakCount - 1} : 00`\n        });\n      }\n    };\n\n    this.sIncrement = () => {\n      if (this.state.sessionCount < 60 && !this.state.running) {\n        this.setState({\n          sessionCount: this.state.sessionCount + 1,\n          currentTime: `${this.state.sessionCount + 1} : 00`\n        });\n      }\n    };\n\n    this.sDecrement = () => {\n      if (this.state.sessionCount > 1 && !this.state.running) {\n        this.setState({\n          sessionCount: this.state.sessionCount - 1,\n          currentTime: `${this.state.sessionCount - 1} : 00`\n        });\n      }\n    };\n\n    this.state = {\n      breakCount: 5,\n      sessionCount: 25,\n      sound: true,\n      //sound is turned on or off\n      cycle: 'Session',\n      //are we in a break or session\n      running: false,\n      //if timer is running\n      paused: true,\n      //if paused is clicked\n      currentTime: '25:00'\n    };\n    this.startTime = null; //what time was stopwatch started\n\n    this.updatedTime = null; //time right now\n\n    this.tInterval = 0; //How often we will check the difference between now and our start time\n\n    this.savedTime = 0; //if user presses pause keep track of how long\n\n    this.difference = 0; //the difference in current time and start time + saved time;\n  } //Start the stopwatch\n\n\n  // countDown = () => {\n  //   // if (this.state.sessionCount !== 0) {\n  //   //   startTime = new Date().getTime();\n  //   //   tInterval = setInterval(getShowTime, 1);\n  //   // }\n  // }\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container_div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Pomodoro Clock\"), React.createElement(Setter, {\n      breakCount: this.state.breakCount,\n      sessionCount: this.state.sessionCount,\n      bIncrement: this.bIncrement,\n      bDecrement: this.bDecrement,\n      sIncrement: this.sIncrement,\n      sDecrement: this.sDecrement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(Timer, {\n      breakCount: this.state.breakCount,\n      sessionCount: this.state.sessionCount,\n      currentTime: this.state.currentTime,\n      cycle: this.state.cycle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(Controls, {\n      startTimer: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(Sound, {\n      sound: this.state.sound,\n      toggleSound: this.toggleSound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/makosguba/Desktop/tomato_timer/src/App.js"],"names":["React","Component","Setter","Timer","Controls","Sound","App","constructor","props","startTimer","state","running","startTime","Date","getTime","tInterval","setInterval","getShowTime","setState","updatedTime","savedTime","difference","cycle","sessionCount","console","log","breakCount","minutes","Math","floor","seconds","currentTime","clearInterval","switchMode","toggleSound","sound","bIncrement","bDecrement","sIncrement","sDecrement","paused","render"],"mappings":"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","sourcesContent":["import React, {Component } from 'react';\nimport './App.css';\nimport Setter from './components/Setter/Setter';\nimport Timer from './components/Timer/Timer';\nimport Controls from './components/Controls/Controls';\nimport Sound from './components/Sound/Sound';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        breakCount: 5,\n        sessionCount: 25,\n        sound: true, //sound is turned on or off\n        cycle: 'Session',//are we in a break or session\n        running: false, //if timer is running\n        paused: true,//if paused is clicked\n        currentTime: '25:00'\n    }\n\n    this.startTime = null; //what time was stopwatch started\n    this.updatedTime= null; //time right now\n    this.tInterval = 0; //How often we will check the difference between now and our start time\n    this.savedTime = 0; //if user presses pause keep track of how long\n    this.difference = 0; //the difference in current time and start time + saved time;\n}\n    \n    //Start the stopwatch\n    startTimer = () => {\n      if (!this.state.running) { //if the stopwatch is not already \n        this.startTime = new Date().getTime(); //getting time when stopwatch is started\n        //We are going to check the time every second\n        this.tInterval = setInterval(this.getShowTime, 1000); //setting interval\n        this.setState({\n          running: true,\n        });\n      }\n    }\n    //This is the timer function\n    getShowTime = () => {\n      this.updatedTime = new Date().getTime();\n      //if we hit the pause button, the elapsed time needs to be corrected and we must add the time spent waiting\n      if (this.state.savedTime) {\n        this.difference = (this.updatedTime - this.startTime) + this.savedTime;\n      } else { //if pause button was not used\n        if (this.state.cycle === 'Session') { //checking for if we are in break or session\n          this.difference = (this.state.sessionCount * 60000) - (this.updatedTime - this.startTime);\n          console.log('difference', this.difference)\n        }\n        if (this.state.cycle === 'Break') { //check for if we are in break or session\n          this.difference = (this.state.breakCount * 60000) - (this.updatedTime - this.startTime);\n          console.log('difference', this.difference)\n        }\n      }\n\n      var minutes = Math.floor((this.difference % (1000 * 60 * 60)) / (1000 * 60));\n      var seconds = Math.floor((this.difference % (1000 * 60)) / 1000);\n      this.minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n      this.seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n      if (this.seconds >= 0) {\n        this.setState({\n          currentTime: `${this.minutes} : ${this.seconds}`\n        });\n      } else {\n        clearInterval(this.tInterval);\n        if (this.state.cycle === 'Session') {\n          if (this.state.breakCount < 10) {\n            this.setState({\n              cycle: 'Break',\n              currentTime: `0${this.state.breakCount} : 00`\n            })\n          } else {\n            this.setState({\n              cycle: 'Break',\n              currentTime: `${this.state.breakCount} : 00`\n            })\n          }\n        }\n        else {\n          this.setState({\n            cycle: 'Session',\n            currentTime: `${this.state.sessionCount} : 00`\n          })\n        }\n        this.startTime = new Date().getTime();\n        this.tInterval = setInterval(this.getShowTime, 1000);\n      }\n    }\n    \n    //switch mode between session and break\n    switchMode = () => {\n      if (this.state.cycle === 'Session') {\n        this.setState({\n          cycle: 'Break',\n        })\n      }\n      else {\n        this.setState({\n          cycle: 'Session',\n\n        })\n      }\n    }\n\n    //allows user to turn sound on or off\n    toggleSound = () => {\n      this.setState({\n        sound: !this.state.sound\n      })\n    }\n\n    //I think this will play the sound\n    // setSound = (sound) => {\n    //   this.setState({\n    //     sound: sound\n    //   })\n    // };\n\n    bIncrement = ()  => {\n        if (this.state.breakCount < 60 && !this.state.running) {\n            this.setState({\n                breakCount: this.state.breakCount + 1,\n                currentTime: `${this.state.breakCount+1} : 00`\n              });\n        }\n        \n      };\n      \n    bDecrement = () => {\n        if (this.state.breakCount > 1 && !this.state.running) {\n            this.setState({\n                breakCount: this.state.breakCount - 1,\n                currentTime: `${this.state.breakCount-1} : 00`\n            });\n        }\n      };\n    \n    //allows user to increment the session length\n    sIncrement = () => {\n        if (this.state.sessionCount < 60 && !this.state.running) {\n            this.setState({\n                sessionCount: this.state.sessionCount + 1,\n                currentTime: `${this.state.sessionCount+1} : 00`\n            });\n        } \n    };\n    \n    //allows user to decrement the session length\n    sDecrement = () => {\n        if (this.state.sessionCount > 1 && !this.state.running) {\n            this.setState({\n                sessionCount: this.state.sessionCount - 1,\n                currentTime: `${this.state.sessionCount-1} : 00`\n            });\n        }\n    };\n\n    // countDown = () => {\n    //   // if (this.state.sessionCount !== 0) {\n    //   //   startTime = new Date().getTime();\n    //   //   tInterval = setInterval(getShowTime, 1);\n    //   // }\n    // }\n  render() {\n    return (\n      <div className=\"container_div\">\n        <h1>Pomodoro Clock</h1>\n        <Setter \n          breakCount={this.state.breakCount}\n          sessionCount={this.state.sessionCount}\n          bIncrement={this.bIncrement}\n          bDecrement={this.bDecrement}\n          sIncrement={this.sIncrement}\n          sDecrement={this.sDecrement}\n        />\n        <Timer \n          breakCount={this.state.breakCount}\n          sessionCount={this.state.sessionCount}\n          currentTime={this.state.currentTime}\n          cycle={this.state.cycle}\n        />\n        <Controls \n          startTimer={this.startTimer}/>\n        <Sound \n          sound={this.state.sound}\n          toggleSound={this.toggleSound}\n        />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}