{"version":3,"sources":["logo.png","assets/BeepSound.wav","components/Setter/Setter.jsx","components/Timer/Timer.jsx","components/Controls/Controls.jsx","components/Sound/Sound.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Setter","className","id","onClick","this","props","bDecrement","breakCount","bIncrement","sDecrement","sessionCount","sIncrement","Component","Timer","src","logo","alt","cycle","currentTime","Controls","startTimer","pauseTimer","resetTimer","soundButton","sound","toggleSound","App","state","running","savedTime","setState","startTime","Date","getTime","console","log","tInterval","setInterval","getShowTime","paused","updatedTime","difference","minutes","Math","floor","seconds","playPromise","audio","play","undefined","then","_","catch","error","clearInterval","Audio","soundfile","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.27b39699.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d2da1e9c.png\";","module.exports = __webpack_public_path__ + \"static/media/BeepSound.988833bf.wav\";","import React, {Component } from 'react';\n\nimport './Setter.css'\n\nexport default class Setter extends Component {\n  \n    \n\n    render() {\n        return (\n            <div className=\"setter_div\">\n                <div className=\"break_div set_length\">\n                    <p>Break Length</p>\n                    <div>\n                        <div className=\"set\">\n                            <button id=\"down\" onClick={this.props.bDecrement}></button> \n                        </div>\n                        <div className=\"set number\">{this.props.breakCount}</div>\n                        <div className=\"set\">\n                            <button id=\"up\" onClick={this.props.bIncrement}></button> \n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"session_div set_length\">\n                    <p>Session Length</p>\n                    <div>\n                        <div className=\"set\">\n                            <button id=\"down\" onClick={this.props.sDecrement}></button> \n                        </div>\n                        <div className=\"set number\">{this.props.sessionCount}</div>\n                        <div className=\"set\">\n                            <button id=\"up\" onClick={this.props.sIncrement}></button> \n                        </div>\n                    </div>\n                </div>\n                \n            </div>\n        )\n    }\n}","import React, {Component } from 'react';\nimport logo from '../../logo.png';\nimport './Timer.css';\n\nexport default class Timer extends Component {\n    render() {\n        return (\n            <div className=\"timer_div\">\n                <img src={logo} className=\"tomato-logo\" alt=\"logo\" />\n                <div id=\"stopwatch\">\n                    <h2>{this.props.cycle}</h2>\n                    <h1>{this.props.currentTime}</h1>\n                </div>\n            </div>\n        )\n    }\n}","import React, {Component } from 'react';\n\nimport './Controls.css';\n\n\nexport default class Controls extends Component {\n    render() {\n        return (\n            <div className=\"control_div\">\n                <button className=\"control_buttons\" id=\"play\" onClick={this.props.startTimer} ></button>\n                <button className=\"control_buttons\" id=\"pause\" onClick={this.props.pauseTimer}></button>\n                <button className=\"control_buttons\" id=\"reset\" onClick={this.props.resetTimer}></button>    \n            </div>\n        )\n    }\n}\n\n\n","import React, {Component } from 'react';\nimport './Sound.css';\n\n\n\nexport default class Controls extends Component {\n    render() {\n        let soundButton;\n        if(this.props.sound)  {\n            soundButton = <button className=\"control_buttons\" id=\"sound\" onClick={this.props.toggleSound}></button>\n        } else {\n            soundButton = <button className=\"control_buttons\" id=\"no_sound\" onClick={this.props.toggleSound}></button>\n        }\n        return (\n            \n            <div className=\"sound_div\">\n                {soundButton}\n            </div>\n        )\n    }\n}\n\n\n//<button id=\"down\" onClick={this.props.bDecrement}></button> ","import React, {Component } from 'react';\nimport './App.css';\nimport Setter from './components/Setter/Setter';\nimport Timer from './components/Timer/Timer';\nimport Controls from './components/Controls/Controls';\nimport Sound from './components/Sound/Sound';\nimport soundfile from './assets/BeepSound.wav'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        breakCount: 5,\n        sessionCount: 25,\n        sound: true, //sound is turned on or off\n        cycle: 'Session',//are we in a break or session\n        running: false, //if timer is running\n        paused: false,//if paused is clicked\n        currentTime: '25 : 00',\n        startTime: null,\n        updatedTime: null, \n        play: false\n    }\n\n    this.tInterval = 0; //How often we will check the difference between now and our start time\n    this.savedTime = 0; //if user presses pause keep track of how long\n    this.difference = 0; //the difference in current time and start time + saved time;\n    this.audio = new Audio(soundfile);\n}\n    \n    //Start the stopwatch\n    startTimer = () => {\n      if (!this.state.running) { //if the stopwatch is not already running\n        if (!this.savedTime) {\n          this.setState({\n            startTime: new Date().getTime() + 1000\n          });\n        }\n        if (this.savedTime) {\n          this.setState({\n            startTime: new Date().getTime()\n          });\n        }\n        \n        //We are going to check the time every second\n        console.log('startTime: ', this.state.startTime);\n        this.tInterval = setInterval(this.getShowTime, 1000); //setting interval\n        this.setState({\n          running: true,\n          paused: false\n        });\n      }\n    }\n    //This is the timer function\n    getShowTime = () => {\n      this.setState({\n        updatedTime: new Date().getTime()\n      });\n      //this.updatedTime = new Date().getTime() - 1000;\n      console.log('updatedTime: ', this.state.updatedTime);\n      //if we hit the pause button, the elapsed time needs to be corrected and we must add the time spent waiting\n      if (this.savedTime) {\n        console.log('hitting saved time in pause')\n        if (this.state.cycle === 'Session') { //checking for if we are in break or session\n          this.difference = this.savedTime - (this.state.updatedTime - this.state.startTime);\n        }\n        if (this.state.cycle === 'Break') { //check for if we are in break or session\n          this.difference = this.savedTime - (this.state.updatedTime - this.state.startTime);\n        }\n      } else { //if pause button was not used\n        if (this.state.cycle === 'Session') { //checking for if we are in break or session\n          this.difference = (this.state.sessionCount * 60000) - (this.state.updatedTime - this.state.startTime);\n        }\n        if (this.state.cycle === 'Break') { //check for if we are in break or session\n          this.difference = (this.state.breakCount * 60000) - (this.state.updatedTime - this.state.startTime);\n        }\n      }\n\n      var minutes = Math.floor((this.difference % (1000 * 60 * 60)) / (1000 * 60));\n      var seconds = Math.floor((this.difference % (1000 * 60)) / 1000);\n      this.minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n      this.seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n      console.log(this.seconds)\n      if (this.difference <= 1001) {\n        console.log('1 second left')\n        if (this.state.sound) {\n          var playPromise = this.audio.play();\n\n          if (playPromise !== undefined) {\n            playPromise\n              .then(_ => {\n                // Automatic playback started!\n                // Show playing UI.\n                console.log(\"audio played auto\");\n              })\n              .catch(error => {\n                // Auto-play was prevented\n                // Show paused UI.\n                console.log(\"playback prevented\");\n              });\n          }\n        } \n      }\n\n      if (this.seconds >= 0) {\n        this.setState({\n          currentTime: `${this.minutes} : ${this.seconds}`\n        });\n        console.log('currentTime: ', this.state.currentTime);\n      } else {\n\n       \n\n        clearInterval(this.tInterval); //we clear the interval when the timer reaches 0\n        this.savedTime = 0;\n\n        \n        console.log(this.savedTime)\n        if (this.state.cycle === 'Session') { //we toggle the session to break\n          if (this.state.breakCount < 10) { //adding some formatting for single digits\n            this.setState({\n              cycle: 'Break',\n              currentTime: `0${this.state.breakCount} : 00`\n            })\n          } else { \n            this.setState({ \n              cycle: 'Break',\n              currentTime: `${this.state.breakCount} : 00`\n            })\n          }\n        }\n        else { //if we are in a break, we toggle to a session\n          if (this.state.sessionCount < 10) { //adding some formatting for single digits\n            this.setState({\n              cycle: 'Session',\n              currentTime: `0${this.state.sessionCount} : 00`\n            })\n          } else { \n            this.setState({ \n              cycle: 'Session',\n              currentTime: `${this.state.sessionCount} : 00`\n            })\n          }\n        }\n        this.setState({ \n          startTime: new Date().getTime() + 1000\n        })\n        //this.startTime = new Date().getTime(); //getting new start time\n        this.tInterval = setInterval(this.getShowTime, 1000); //starting the timer for the next session\n        \n      }\n    }\n\n    //reset function\n    resetTimer = () => {\n      if (this.state.running || this.state.paused) { //if the stopwatch is not already running\n        clearInterval(this.tInterval);\n        this.setState({\n          breakCount: 5,\n          sessionCount: 25,\n          sound: true, //sound is turned on or off\n          cycle: 'Session',//are we in a break or session\n          running: false, //if timer is running\n          paused: false,//if paused is clicked\n          currentTime: '25 : 00'\n        });\n        this.savedTime = 0;\n        this.difference = 0;\n        this.tInterval = 0;\n      }\n    }\n\n    pauseTimer = () => {\n      console.log(this.state.paused)\n      \n      if (!this.difference){\n        //if the timer is never started we do nothing\n      }\n      else if (!this.state.paused) { //if the stopwatch is not already running\n        clearInterval(this.tInterval);\n        console.log(this.state.paused, 'second pause')\n        if (this.state.cycle === \"Session\") {\n          this.savedTime = this.difference;\n        }\n        if (this.state.cycle === \"Break\") {\n          this.savedTime = this.difference;\n        }\n        this.setState({\n          running: false,\n          paused: true,//if paused is clicked\n        });\n      }\n      else {\n        this.startTimer();\n      }\n    }\n\n    //allows user to turn sound on or off\n    toggleSound = () => {\n      this.setState({\n        sound: !this.state.sound\n      })\n    }\n\n    play = () => {\n      this.setState({ play: true})\n      //this.audio.play();\n\n      var playPromise = this.audio.play();\n      console.log(playPromise)\n\n      if (playPromise !== undefined) {\n        playPromise\n          .then(_ => {\n            // Automatic playback started!\n            // Show playing UI.\n            console.log(\"audio played auto\");\n          })\n          .catch(error => {\n            // Auto-play was prevented\n            // Show paused UI.\n            console.log(\"playback prevented\");\n          });\n      }\n\n\n\n    }\n\n    //I think this will play the sound\n    // setSound = (sound) => {\n    //   this.setState({\n    //     sound: sound\n    //   })\n    // };\n\n    bIncrement = ()  => {\n        if (this.state.breakCount < 60 && !this.state.running && !this.state.paused) {\n          this.setState({\n                breakCount: this.state.breakCount + 1,\n              });\n        }\n        \n      };\n      \n    bDecrement = () => {\n        if (this.state.breakCount > 1 && !this.state.running && !this.state.paused) {\n            this.setState({\n                breakCount: this.state.breakCount - 1,\n            });\n        }\n      };\n    \n    //allows user to increment the session length\n    sIncrement = () => {\n        if (this.state.sessionCount < 60 && !this.state.running && !this.state.paused) {\n          if (this.state.sessionCount < 10) { //adding some formatting for single digits\n            this.setState({\n              sessionCount: this.state.sessionCount + 1,\n              currentTime: `0${this.state.sessionCount+1} : 00`\n            })\n          } else { \n            this.setState({ \n              sessionCount: this.state.sessionCount + 1,\n              currentTime: `${this.state.sessionCount+1} : 00`\n            })\n          }\n        }  \n    };\n    \n    //allows user to decrement the session length\n    sDecrement = () => {\n        if (this.state.sessionCount > 1 && !this.state.running && !this.state.paused) {\n          if (this.state.sessionCount < 10) { //adding some formatting for single digits\n            this.setState({\n              sessionCount: this.state.sessionCount - 1,\n              currentTime: `0${this.state.sessionCount-1} : 00`\n            })\n          } else { \n            this.setState({ \n              sessionCount: this.state.sessionCount - 1,\n              currentTime: `${this.state.sessionCount-1} : 00`\n            })\n          }\n        }   \n        \n    };\n\n    // countDown = () => {\n    //   // if (this.state.sessionCount !== 0) {\n    //   //   startTime = new Date().getTime();\n    //   //   tInterval = setInterval(getShowTime, 1);\n    //   // }\n    // }\n  render() {\n    return (\n      <div className=\"container_div\">\n        <h1>Pomodoro Clock</h1>\n        <Setter \n          breakCount={this.state.breakCount}\n          sessionCount={this.state.sessionCount}\n          bIncrement={this.bIncrement}\n          bDecrement={this.bDecrement}\n          sIncrement={this.sIncrement}\n          sDecrement={this.sDecrement}\n        />\n        <Timer \n          breakCount={this.state.breakCount}\n          sessionCount={this.state.sessionCount}\n          currentTime={this.state.currentTime}\n          cycle={this.state.cycle}\n        />\n        <Controls \n          startTimer={this.startTimer}\n          resetTimer={this.resetTimer}\n          pauseTimer={this.pauseTimer}\n        />\n        <Sound \n          sound={this.state.sound}\n          toggleSound={this.toggleSound}\n        />\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}